{"ast":null,"code":"var _jsxFileName = \"/Users/shreyaskulkarni/Desktop/projects/notes/frontend/src/Components/AddNoteModal.js\",\n  _s = $RefreshSig$();\n// import { FC, memo, React } from \"react\";\n// import { Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\n// // import { HackAutoFill } from \"../HackAutoFill/HackAutoFill\";\n\n// export const AddNoteModal = (props) => {\n\n//   const {\n//     headerTitle,\n//     isOpen = true,\n//     modalBody,\n//     onClose,\n//     size = \"md\",\n//     id,\n//     isRtl = false,\n//     otherProps = {},\n//     modalFooter,\n//     bodyClassName = \"\",\n//     backdrop = \"static\",\n//     keyboard = true,\n//     hideClose = false\n//   } = props;\n\n//   return (\n//     <Modal\n//       isOpen={isOpen}\n//       toggle={() => {\n//         onClose();\n//       }}\n//       size={size}\n//       keyboard={keyboard}\n//       //@ts-ignore\n//       backdrop={backdrop}\n//       id={id}\n//       {...otherProps}\n//     >\n//       {headerTitle &&\n//         (hideClose ? (\n//           <ModalHeader> {headerTitle} </ModalHeader>\n//         ) : (\n//           <ModalHeader\n//             toggle={() => {\n//               onClose();\n//             }}\n//           >\n//             {\" \"}\n//             {headerTitle}{\" \"}\n//           </ModalHeader>\n//         ))}\n//       <ModalBody className={` ${bodyClassName} `}>{modalBody}</ModalBody>\n//       {modalFooter && <ModalFooter>{modalFooter}</ModalFooter>}\n//       {/* <HackAutoFill /> */}\n//     </Modal>\n//   );\n// }\n\n// import React, { useState } from 'react';\n// import { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\n// export const Example = (args) => {\n//   const [modal, setModal] = useState(false);\n\n//   const toggle = () => setModal(!modal);\n\n//   return (\n//     <div>\n//       <Button color=\"danger\" onClick={toggle}>\n//         Click Me\n//       </Button>\n//       <Modal isOpen={true} toggle={toggle} {...args}>\n//         <ModalHeader toggle={toggle}>Modal title</ModalHeader>\n//         <ModalBody>\n//           Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\n//           eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n//           minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n//           aliquip ex ea commodo consequat. Duis aute irure dolor in\n//           reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n//           pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n//           culpa qui officia deserunt mollit anim id est laborum.\n//         </ModalBody>\n//         <ModalFooter>\n//           <Button color=\"primary\" onClick={toggle}>\n//             Do Something\n//           </Button>{' '}\n//           <Button color=\"secondary\" onClick={toggle}>\n//             Cancel\n//           </Button>\n//         </ModalFooter>\n//       </Modal>\n//     </div>\n//   );\n// }\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Modal = ({\n  isOpen,\n  onClose,\n  children\n}) => {\n  _s();\n  const [isModalOpen, setModalOpen] = useState(true);\n  const closeModal = () => {\n    setModalOpen(false);\n    onClose();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-button\",\n          onClick: closeModal,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this), children]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(Modal, \"BrIdEza/Ov4npoaprhiLGalpWjk=\");\n_c = Modal;\nvar _c;\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Modal","isOpen","onClose","children","_s","isModalOpen","setModalOpen","closeModal","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shreyaskulkarni/Desktop/projects/notes/frontend/src/Components/AddNoteModal.js"],"sourcesContent":["// import { FC, memo, React } from \"react\";\n// import { Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\n// // import { HackAutoFill } from \"../HackAutoFill/HackAutoFill\";\n\n// export const AddNoteModal = (props) => {\n\n//   const {\n//     headerTitle,\n//     isOpen = true,\n//     modalBody,\n//     onClose,\n//     size = \"md\",\n//     id,\n//     isRtl = false,\n//     otherProps = {},\n//     modalFooter,\n//     bodyClassName = \"\",\n//     backdrop = \"static\",\n//     keyboard = true,\n//     hideClose = false\n//   } = props;\n\n//   return (\n//     <Modal\n//       isOpen={isOpen}\n//       toggle={() => {\n//         onClose();\n//       }}\n//       size={size}\n//       keyboard={keyboard}\n//       //@ts-ignore\n//       backdrop={backdrop}\n//       id={id}\n//       {...otherProps}\n//     >\n//       {headerTitle &&\n//         (hideClose ? (\n//           <ModalHeader> {headerTitle} </ModalHeader>\n//         ) : (\n//           <ModalHeader\n//             toggle={() => {\n//               onClose();\n//             }}\n//           >\n//             {\" \"}\n//             {headerTitle}{\" \"}\n//           </ModalHeader>\n//         ))}\n//       <ModalBody className={` ${bodyClassName} `}>{modalBody}</ModalBody>\n//       {modalFooter && <ModalFooter>{modalFooter}</ModalFooter>}\n//       {/* <HackAutoFill /> */}\n//     </Modal>\n//   );\n// }\n\n\n// import React, { useState } from 'react';\n// import { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\n// export const Example = (args) => {\n//   const [modal, setModal] = useState(false);\n\n//   const toggle = () => setModal(!modal);\n\n//   return (\n//     <div>\n//       <Button color=\"danger\" onClick={toggle}>\n//         Click Me\n//       </Button>\n//       <Modal isOpen={true} toggle={toggle} {...args}>\n//         <ModalHeader toggle={toggle}>Modal title</ModalHeader>\n//         <ModalBody>\n//           Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\n//           eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n//           minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n//           aliquip ex ea commodo consequat. Duis aute irure dolor in\n//           reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n//           pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n//           culpa qui officia deserunt mollit anim id est laborum.\n//         </ModalBody>\n//         <ModalFooter>\n//           <Button color=\"primary\" onClick={toggle}>\n//             Do Something\n//           </Button>{' '}\n//           <Button color=\"secondary\" onClick={toggle}>\n//             Cancel\n//           </Button>\n//         </ModalFooter>\n//       </Modal>\n//     </div>\n//   );\n// }\n\n\nimport React, { useState } from 'react';\n\nexport const Modal = ({ isOpen, onClose, children }) => {\n  const [isModalOpen, setModalOpen] = useState(true);\n\n  const closeModal = () => {\n    setModalOpen(false);\n    onClose();\n  };\n\n  return (\n    <>\n      {isModalOpen && (\n        <div className=\"modal-overlay\">\n          <div className=\"modal\">\n            <button className=\"close-button\" onClick={closeModal}>\n              Close\n            </button>\n            {children}\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAExC,OAAO,MAAMC,KAAK,GAAGA,CAAC;EAAEC,MAAM;EAAEC,OAAO;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACtD,MAAM,CAACC,WAAW,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAElD,MAAMY,UAAU,GAAGA,CAAA,KAAM;IACvBD,YAAY,CAAC,KAAK,CAAC;IACnBJ,OAAO,CAAC,CAAC;EACX,CAAC;EAED,oBACEL,OAAA,CAAAE,SAAA;IAAAI,QAAA,EACGE,WAAW,iBACVR,OAAA;MAAKW,SAAS,EAAC,eAAe;MAAAL,QAAA,eAC5BN,OAAA;QAAKW,SAAS,EAAC,OAAO;QAAAL,QAAA,gBACpBN,OAAA;UAAQW,SAAS,EAAC,cAAc;UAACC,OAAO,EAAEF,UAAW;UAAAJ,QAAA,EAAC;QAEtD;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EACRV,QAAQ;MAAA;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EACN,gBACD,CAAC;AAEP,CAAC;AAACT,EAAA,CAtBWJ,KAAK;AAAAc,EAAA,GAALd,KAAK;AAAA,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}